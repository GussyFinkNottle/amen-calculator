let t x = x :*: cSuc :*: x :^: cM in test $ vz :^: vy :^: t vx
let t x = x :*: cSuc :*: x :^: cM in test $ vy :^: t vx
let t x = x :*: cSuc :*: x :^: cM in test $ t vx
let t x = x :*: sSuc :*: x :^: cM in test $ t vx
test $ c3 :^: ((vx :^: cM) :&: c1)
test $ va :^: ((vx :^: cM) :&: c1)
test $ va :^: ((vx :^: cM) :&: c1))
let t = cM :*: c1 :^: cPair :^: cC :*: va :^: cE in test $ vx :^: t
let t = cM :*: c1 :^: cPair :^: cC :*: va :^: cE in test $ t
test $ vx :^: c0 :^: cCurry
test $ c0 :^: cCurry
let t = c0 :*: va :^: cE in test $ vx :^: t
let t = c0 :*: va :^: cE in test $ t
sgbar zero "ab" 
sgbar zero "ab" ++ "def"
sgbar zero "ab" "def"
:t sgbar zero
sgbar id "" "def"
sgbar id "ab" "def"
sgbar id "abc" "def"
sgbar (+id) "abc" "def"
sgbar id "abc" "def"
:t sgbar id "abc" "def"
:t sgbar id
:t (sgbar . sgbar) 
:t (sgbar . sgbar) id
:t sgbar . sgbar
:t sgbar + id
:t sgbar id
:t sgbar 
test $ cR_demo
test $ cL_demo
:r
cL_demo
cR_demo
test $ cR_demo
test $ vz :^: vy :^: vx :^: cC :^: cC
test $ vy :^: vx :^: cC :^: cC
test $ vx :^: cC :^: cC
:t flip flip
base10  (zero + sgbar one )
base10  (zero + sg one )
base10  (zero + sg zero )
:t (zero + sg zero )
:t (zero + sg zero )
:t sg zero
:t sg
:t sg two
sg two
test $ demoEx
test $ demoExp'
test $ demoExp
test $ demoAdd'
test $ demoAdd
test $ demoExp'
test $ demoExp
demoExp
:t sg
:t sgbar'
:t sgbar
:r
:r
:t sgbar
:t sgBar
-- [*] * [*] ^ [*] * [*] * ([^] * ([^] + [^]) ^ [*]) ^ [^]
let s = cS' :*: (cW :^: cM :^: cC) in test $ s -- vc :^: vb :^: va :^: s
let s = cS' :*: (cW :^: cM :^: cC) in test $ vc :^: vb :^: va :^: s
let s = cS' :*: (cW :^: cM :^: cC) in test $ vx :^: vc :^: vb :^: va :^: s
let s = cS' :*: (cW :^: cM :^: cS) in test $ vx :^: vc :^: vb :^: va :^: s
let s = cS' :*: (cW :^: cM :^: cS) in test $ vc :^: vb :^: va :^: s
let s = cS' :*: (cW :^: cM :^: cS) in test $ vx :^: s
let s = cS' :*: (cW :^: cM :^: cS) in test $ s
test $ cS' :^: cW
test cS'
:t cS'
:t const ^ (^)
:t zero ^ const
:t zero ^ (^)
let t = va in test $ vy :^: vx :^: (cE :*: t :^: cM)
let t = va in test $ vx :^: (cE :*: t :^: cM)
let t = va in test $ cE :*: t :^: cM
let wc = (^) + (^) ; w = flip wc ; ewc = cE :+: cE ; ew = ewc :^: cC in test ew
:t let wc = (^) + (^) ; w = flip wc ; ewc = cE :+: cE ; ew = ewc :^: cC in ew
:t let wc = (^) + (^) ; w = flip wc in w
:t (*) * ((*) *)
:t (&)
:t (^)
let e = rdexp "[^] ^ [*]" ; e' = rdexp "[~]" in test $  vz :^: vy :^: vx :^: cC
let e = rdexp "[^] ^ [*]" ; e' = rdexp "[~]" in test $  vz :^: vy :^: vx :^: e'
let e = rdexp "[^] ^ [*]" ; e' = rdexp "[~]"in test $  vz :^: vy :^: vx :^: e
let e = rdexp "[^] ^ [*]" ; e' = rdexp "[~]"in test $  vz :^: vy :^: vx :^: e'
let e = rdexp "[^] ^ [*]" ; e' = rdexp "[~]"in test $  vy :^: vx :^: e'
let e = rdexp "[^] ^ [*]" ; e' = rdexp "[~]"in test $  vy :^: vx :^: e
let e = rdexp "[^] ^ [*]" ; e' = redexp "[~]"in test $  vy :^: vx :^: e
let e = rdexp "[^] ^ [*]" in test $  vy :^: vx :^: e
:r
:r
:r
:r
let e = rdexp "[^] ^ [*]" in test $  vy :^: vx :^: e
let e = rdexp "^ ^ (*)" in test $  vy :^: vx :^: e
let e = rdexp "(^) ^ (*)" in test $  vy :^: vx :^: e
let e = rdexp "(^) ^ (*)" in test $  e
let e = rdexp "(^) ^ (*)" test $  e
:r
mydrop four  "aqbcde"
mydrop two "aqbcde"
:t mydrop two
:t mydrop'
:t mydrop
:r
:r
:r
:t del1
:r
:r
:t del1
:r
:r
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: h va vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: g (va :*: cC) vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: g (va :*: cPair) vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: g (va :*: cC) vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: g (va :^: cC) vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: g (va :^: cPair) vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: g (va :^: cE) vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: g (va :^: cPair) vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: g va vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: h va vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vx :^: vc :^: f va vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ vc :^: f va vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b :*: cE ; h a b = a :*: cC :+: b :*: cE  in test $ f va vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b * cE ; h a b = a :*: cC :+: b :*: cE  in test $ f va vb
let f a b = a :*: cPair :+: b :*: cE ; g a b = a :+: b * cE ; h a b = a :*: cC :+: b :*: cE 
test $ vw :^: vz :^: vy :^: vx :^: (cCurry :^: cC) 
test $ vw :^: vz :^: vy :^: vx :^: (cPair :*: cM)
test $ vw :^: vz :^: vy :^: vx :^: cCurry :*: cC 
test $ vz :^: vy :^: vx :^: cCurry :*: cC 
test $ vy :^: vx :^: cCurry :*: cC 
test $ vx :^: cCurry :*: cC 
